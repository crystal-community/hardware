{"repository_name":"hardware","body":"# hardware\n\n[![CI](https://github.com/crystal-community/hardware/workflows/CI/badge.svg)](https://github.com/crystal-community/hardware/actions?query=workflow%3ACI)\n[![Documentation](https://github.com/crystal-community/hardware/workflows/Documentation/badge.svg)](https://crystal-community.github.io/hardware)\n[![ISC](https://img.shields.io/badge/License-ISC-blue.svg?style=flat-square)](https://en.wikipedia.org/wiki/ISC_license)\n\nA basic module to get CPU, memory and network informations of the current running OS and its processes.\n\nTested on Linux.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  hardware:\n    github: crystal-community/hardware\n```\n\n## Documentation\n\nThe documentation is accessible at https://crystal-community.github.io/hardware.\n\nIt is generated with [crystal docs](https://crystal-lang.org/docs/conventions/documenting_code.html) in the `gh-pages` branch.\n\n## Examples\n\n```crystal\nrequire \"hardware\"\n\nmemory = Hardware::Memory.new\nmemory.used         #=> 2731404\nmemory.percent.to_i #=> 32\n\ncpu = Hardware::CPU.new\npid_stat = Hardware::PID.new.stat            # Default is Process.pid\napp_stat = Hardware::PID.new(\"firefox\").stat # Take the first matching PID\n\nloop do\n  sleep 1\n  p cpu.usage!.to_i          #=> 17\n  p pid_stat.cpu_usage!      #=> 1.5\n  p app_stat.cpu_usage!.to_i #=> 4\nend\n```\n## Development\n\n### Docker\n\nYou can run the specs in a Docker container:\n\n```sh\n$ docker-compose up\n$ docker-compose run spec\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/crystal-community/hardware/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [bararchy](https://github.com/bararchy) - creator, maintainer   \n- [j8r](https://github.com/j8r) - maintainer  \n","program":{"html_id":"hardware/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"hardware","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"hardware/Hardware","path":"Hardware.html","kind":"module","full_name":"Hardware","name":"Hardware","abstract":false,"locations":[{"filename":"src/error.cr","line_number":1,"url":null},{"filename":"src/hardware.cr","line_number":3,"url":null}],"repository_name":"hardware","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"hardware/Hardware/CPU","path":"Hardware/CPU.html","kind":"struct","full_name":"Hardware::CPU","name":"CPU","abstract":false,"superclass":{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"hardware/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"hardware/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cpu.cr","line_number":12,"url":null}],"repository_name":"hardware","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hardware/Hardware","kind":"module","full_name":"Hardware","name":"Hardware"},"doc":"CPU related informations of your system.\n\n```\ncpu = Hardware::CPU.new\nloop do\n  sleep 1\n  p cpu.usage!.to_i # => 17\nend\n```","summary":"<p>CPU related informations of your system.</p>","constructors":[{"html_id":"new(number:Int32|Nil=nil,parse_stats:Bool=true)-class-method","name":"new","doc":"Creates a new CPU stat to monitor the given core.\n\nMust be lower than `System.cpu_count`, or `nil` for the whole cores in total.","summary":"<p>Creates a new CPU stat to monitor the given core.</p>","abstract":false,"args":[{"name":"number","default_value":"nil","external_name":"number","restriction":"Int32 | ::Nil"},{"name":"parse_stats","default_value":"true","external_name":"parse_stats","restriction":"Bool"}],"args_string":"(number : Int32 | Nil = nil, parse_stats : Bool = true)","args_html":"(number : Int32 | Nil = <span class=\"n\">nil</span>, parse_stats : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/cpu.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"number","default_value":"nil","external_name":"number","restriction":"Int32 | ::Nil"},{"name":"parse_stats","default_value":"true","external_name":"parse_stats","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(number, parse_stats)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"guest:Int64-instance-method","name":"guest","doc":"Returns the \"guest\" stat field.","summary":"<p>Returns the &quot;guest&quot; stat field.</p>","abstract":false,"def":{"name":"guest","return_type":"Int64","visibility":"Public","body":"if (__temp_144 = @guest).nil?\n  @guest = (begin\n    parse_stat_file\n    @guest || (raise(Error.new(\"Field not parsed: 'guest'\")))\n  end)\nelse\n  __temp_144\nend"},"external_var":false},{"html_id":"guest_nice:Int64-instance-method","name":"guest_nice","doc":"Returns the \"guest_nice\" stat field.","summary":"<p>Returns the &quot;guest_nice&quot; stat field.</p>","abstract":false,"def":{"name":"guest_nice","return_type":"Int64","visibility":"Public","body":"if (__temp_145 = @guest_nice).nil?\n  @guest_nice = (begin\n    parse_stat_file\n    @guest_nice || (raise(Error.new(\"Field not parsed: 'guest_nice'\")))\n  end)\nelse\n  __temp_145\nend"},"external_var":false},{"html_id":"idle:Int64-instance-method","name":"idle","doc":"Returns the \"idle\" stat field.","summary":"<p>Returns the &quot;idle&quot; stat field.</p>","abstract":false,"def":{"name":"idle","return_type":"Int64","visibility":"Public","body":"if (__temp_139 = @idle).nil?\n  @idle = (begin\n    parse_stat_file\n    @idle || (raise(Error.new(\"Field not parsed: 'idle'\")))\n  end)\nelse\n  __temp_139\nend"},"external_var":false},{"html_id":"idle_total:Int64-instance-method","name":"idle_total","doc":"Sum of `idle` and `iowait`.","summary":"<p>Sum of <code><a href=\"../Hardware/CPU.html#idle%3AInt64-instance-method\">#idle</a></code> and <code><a href=\"../Hardware/CPU.html#iowait%3AInt64-instance-method\">#iowait</a></code>.</p>","abstract":false,"location":{"filename":"src/cpu.cr","line_number":77,"url":null},"def":{"name":"idle_total","return_type":"Int64","visibility":"Public","body":"if (__temp_147 = @idle_total).nil?\n  @idle_total = (idle + iowait)\nelse\n  __temp_147\nend"},"external_var":false},{"html_id":"iowait:Int64-instance-method","name":"iowait","doc":"Returns the \"iowait\" stat field.","summary":"<p>Returns the &quot;iowait&quot; stat field.</p>","abstract":false,"def":{"name":"iowait","return_type":"Int64","visibility":"Public","body":"if (__temp_140 = @iowait).nil?\n  @iowait = (begin\n    parse_stat_file\n    @iowait || (raise(Error.new(\"Field not parsed: 'iowait'\")))\n  end)\nelse\n  __temp_140\nend"},"external_var":false},{"html_id":"irq:Int64-instance-method","name":"irq","doc":"Returns the \"irq\" stat field.","summary":"<p>Returns the &quot;irq&quot; stat field.</p>","abstract":false,"def":{"name":"irq","return_type":"Int64","visibility":"Public","body":"if (__temp_141 = @irq).nil?\n  @irq = (begin\n    parse_stat_file\n    @irq || (raise(Error.new(\"Field not parsed: 'irq'\")))\n  end)\nelse\n  __temp_141\nend"},"external_var":false},{"html_id":"nice:Int64-instance-method","name":"nice","doc":"Returns the \"nice\" stat field.","summary":"<p>Returns the &quot;nice&quot; stat field.</p>","abstract":false,"def":{"name":"nice","return_type":"Int64","visibility":"Public","body":"if (__temp_137 = @nice).nil?\n  @nice = (begin\n    parse_stat_file\n    @nice || (raise(Error.new(\"Field not parsed: 'nice'\")))\n  end)\nelse\n  __temp_137\nend"},"external_var":false},{"html_id":"number:Int32|Nil-instance-method","name":"number","doc":"CPU number. `nil` means the whole cores in total.","summary":"<p>CPU number.</p>","abstract":false,"location":{"filename":"src/cpu.cr","line_number":14,"url":null},"def":{"name":"number","return_type":"Int32 | ::Nil","visibility":"Public","body":"@number"},"external_var":false},{"html_id":"softirq:Int64-instance-method","name":"softirq","doc":"Returns the \"softirq\" stat field.","summary":"<p>Returns the &quot;softirq&quot; stat field.</p>","abstract":false,"def":{"name":"softirq","return_type":"Int64","visibility":"Public","body":"if (__temp_142 = @softirq).nil?\n  @softirq = (begin\n    parse_stat_file\n    @softirq || (raise(Error.new(\"Field not parsed: 'softirq'\")))\n  end)\nelse\n  __temp_142\nend"},"external_var":false},{"html_id":"steal:Int64-instance-method","name":"steal","doc":"Returns the \"steal\" stat field.","summary":"<p>Returns the &quot;steal&quot; stat field.</p>","abstract":false,"def":{"name":"steal","return_type":"Int64","visibility":"Public","body":"if (__temp_143 = @steal).nil?\n  @steal = (begin\n    parse_stat_file\n    @steal || (raise(Error.new(\"Field not parsed: 'steal'\")))\n  end)\nelse\n  __temp_143\nend"},"external_var":false},{"html_id":"system:Int64-instance-method","name":"system","doc":"Returns the \"system\" stat field.","summary":"<p>Returns the &quot;system&quot; stat field.</p>","abstract":false,"def":{"name":"system","return_type":"Int64","visibility":"Public","body":"if (__temp_138 = @system).nil?\n  @system = (begin\n    parse_stat_file\n    @system || (raise(Error.new(\"Field not parsed: 'system'\")))\n  end)\nelse\n  __temp_138\nend"},"external_var":false},{"html_id":"total:Int64-instance-method","name":"total","doc":"Sum of `used` and `idle_total`","summary":"<p>Sum of <code><a href=\"../Hardware/CPU.html#used%3AInt64-instance-method\">#used</a></code> and <code><a href=\"../Hardware/CPU.html#idle_total%3AInt64-instance-method\">#idle_total</a></code></p>","abstract":false,"location":{"filename":"src/cpu.cr","line_number":80,"url":null},"def":{"name":"total","return_type":"Int64","visibility":"Public","body":"if (__temp_148 = @total).nil?\n  @total = (used + idle_total)\nelse\n  __temp_148\nend"},"external_var":false},{"html_id":"usage(previous_cpu:CPU=self):Float64-instance-method","name":"usage","doc":"Returns each CPU usage in percentage based on the previous `CPU`.","summary":"<p>Returns each CPU usage in percentage based on the previous <code><a href=\"../Hardware/CPU.html\">CPU</a></code>.</p>","abstract":false,"args":[{"name":"previous_cpu","default_value":"self","external_name":"previous_cpu","restriction":"CPU"}],"args_string":"(previous_cpu : CPU = self) : Float64","args_html":"(previous_cpu : <a href=\"../Hardware/CPU.html\">CPU</a> = <span class=\"k\">self</span>) : Float64","location":{"filename":"src/cpu.cr","line_number":83,"url":null},"def":{"name":"usage","args":[{"name":"previous_cpu","default_value":"self","external_name":"previous_cpu","restriction":"CPU"}],"return_type":"Float64","visibility":"Public","body":"((used - previous_cpu.used) / (total - previous_cpu.total)) * 100"},"external_var":false},{"html_id":"usage!:Float64-instance-method","name":"usage!","doc":"Like `#usage`, but mutates the instance.\n\n```\ncpu = Hardware::CPU.new\nloop do\n  sleep 1\n  p cpu.usage!.to_i # => 17\nend\n```","summary":"<p>Like <code><a href=\"../Hardware/CPU.html#usage%28previous_cpu%3ACPU%3Dself%29%3AFloat64-instance-method\">#usage</a></code>, but mutates the instance.</p>","abstract":false,"location":{"filename":"src/cpu.cr","line_number":97,"url":null},"def":{"name":"usage!","return_type":"Float64","visibility":"Public","body":"@user || (raise(Error.new(\"Stat file not previously parsed\")))\nprevious_cpu = self\n@used = @idle_total = @total = nil\nparse_stat_file\nusage(previous_cpu)\n"},"external_var":false},{"html_id":"used:Int64-instance-method","name":"used","doc":"Sum of `user`, `nice`, `system`, `irq`, `softirq` and `steal`.","summary":"<p>Sum of <code><a href=\"../Hardware/CPU.html#user%3AInt64-instance-method\">#user</a></code>, <code><a href=\"../Hardware/CPU.html#nice%3AInt64-instance-method\">#nice</a></code>, <code><a href=\"../Hardware/CPU.html#system%3AInt64-instance-method\">#system</a></code>, <code><a href=\"../Hardware/CPU.html#irq%3AInt64-instance-method\">#irq</a></code>, <code><a href=\"../Hardware/CPU.html#softirq%3AInt64-instance-method\">#softirq</a></code> and <code><a href=\"../Hardware/CPU.html#steal%3AInt64-instance-method\">#steal</a></code>.</p>","abstract":false,"location":{"filename":"src/cpu.cr","line_number":74,"url":null},"def":{"name":"used","return_type":"Int64","visibility":"Public","body":"if (__temp_146 = @used).nil?\n  @used = (((((user + nice) + system) + irq) + softirq) + steal)\nelse\n  __temp_146\nend"},"external_var":false},{"html_id":"user:Int64-instance-method","name":"user","doc":"Returns the \"user\" stat field.","summary":"<p>Returns the &quot;user&quot; stat field.</p>","abstract":false,"def":{"name":"user","return_type":"Int64","visibility":"Public","body":"if (__temp_136 = @user).nil?\n  @user = (begin\n    parse_stat_file\n    @user || (raise(Error.new(\"Field not parsed: 'user'\")))\n  end)\nelse\n  __temp_136\nend"},"external_var":false}]},{"html_id":"hardware/Hardware/Error","path":"Hardware/Error.html","kind":"class","full_name":"Hardware::Error","name":"Error","abstract":false,"superclass":{"html_id":"hardware/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hardware/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hardware/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hardware/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/error.cr","line_number":1,"url":null}],"repository_name":"hardware","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hardware/Hardware","kind":"module","full_name":"Hardware","name":"Hardware"}},{"html_id":"hardware/Hardware/Memory","path":"Hardware/Memory.html","kind":"struct","full_name":"Hardware::Memory","name":"Memory","abstract":false,"superclass":{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"hardware/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"hardware/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/memory.cr","line_number":12,"url":null}],"repository_name":"hardware","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hardware/Hardware","kind":"module","full_name":"Hardware","name":"Hardware"},"doc":"Memory related informations of your system.\n\nMost values are in kB, except HugePages ones.\n\n```\nmemory = Hardware::Memory.new\nmemory.used         # => 2731404\nmemory.percent.to_i # => 32\n```","summary":"<p>Memory related informations of your system.</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Creates a new `Hardware::Memory` based on the current memory state.","summary":"<p>Creates a new <code><a href=\"../Hardware/Memory.html\">Hardware::Memory</a></code> based on the current memory state.</p>","abstract":false,"location":{"filename":"src/memory.cr","line_number":19,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"available:Int32-instance-method","name":"available","doc":"Returns the available memory in KiloBytes.","summary":"<p>Returns the available memory in KiloBytes.</p>","abstract":false,"location":{"filename":"src/memory.cr","line_number":49,"url":null},"def":{"name":"available","return_type":"Int32","visibility":"Public","body":"if (__temp_150 = @available).nil?\n  @available = ((if mem_available = @meminfo[\"MemAvailable\"]?\n    mem_available\n  else\n    (((@meminfo[\"MemFree\"] - @meminfo[\"Buffers\"]) - @meminfo[\"Cached\"]) - @meminfo[\"SReclaimable\"]) - @meminfo[\"Shmem\"]\n  end).to_i)\nelse\n  __temp_150\nend"},"external_var":false},{"html_id":"meminfo:Hash(String,Int64)-instance-method","name":"meminfo","doc":"Returns an Hash from a parsed `/proc/meminfo`.","summary":"<p>Returns an Hash from a parsed <code>/proc/meminfo</code>.</p>","abstract":false,"location":{"filename":"src/memory.cr","line_number":16,"url":null},"def":{"name":"meminfo","return_type":"Hash(String, Int64)","visibility":"Public","body":"@meminfo"},"external_var":false},{"html_id":"percent(used:Bool=true):Float64-instance-method","name":"percent","doc":"Returns either the used/available memory in percentage.","summary":"<p>Returns either the used/available memory in percentage.</p>","abstract":false,"args":[{"name":"used","default_value":"true","external_name":"used","restriction":"Bool"}],"args_string":"(used : Bool = true) : Float64","args_html":"(used : Bool = <span class=\"n\">true</span>) : Float64","location":{"filename":"src/memory.cr","line_number":63,"url":null},"def":{"name":"percent","args":[{"name":"used","default_value":"true","external_name":"used","restriction":"Bool"}],"return_type":"Float64","visibility":"Public","body":"((used ? self.used : available) * 100.0) / total"},"external_var":false},{"html_id":"total:Int32-instance-method","name":"total","doc":"Returns the total memory in KiloBytes.","summary":"<p>Returns the total memory in KiloBytes.</p>","abstract":false,"location":{"filename":"src/memory.cr","line_number":46,"url":null},"def":{"name":"total","return_type":"Int32","visibility":"Public","body":"if (__temp_149 = @total).nil?\n  @total = (@meminfo[\"MemTotal\"].to_i)\nelse\n  __temp_149\nend"},"external_var":false},{"html_id":"used:Int32-instance-method","name":"used","doc":"Returns the memory used in KiloBytes.","summary":"<p>Returns the memory used in KiloBytes.</p>","abstract":false,"location":{"filename":"src/memory.cr","line_number":60,"url":null},"def":{"name":"used","return_type":"Int32","visibility":"Public","body":"if (__temp_151 = @used).nil?\n  @used = (total - available)\nelse\n  __temp_151\nend"},"external_var":false}]},{"html_id":"hardware/Hardware/Net","path":"Hardware/Net.html","kind":"struct","full_name":"Hardware::Net","name":"Net","abstract":false,"superclass":{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"hardware/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"hardware/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/net.cr","line_number":17,"url":null}],"repository_name":"hardware","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hardware/Hardware","kind":"module","full_name":"Hardware","name":"Hardware"},"doc":"Network informations about the system or a process like the brandwidth use.\n\nExample of network brandwidth calculation:\n```\nnet = Hardware::Net.new # System network stats\nold_in, old_out = net.in_octets, net.out_octets\nloop do\n  sleep 1\n  net = Hardware::Net.new # Update network stats\n  now_in, now_out = net.in_octets, net.out_octets\n  puts \"down: #{(now_in - old_in) / 1000}kB/s | up: #{(now_out - old_out) / 1000}kB/s\" # => down: 427kB/s | up: 24kB/s\n  old_in, old_out = now_in, now_out\nend\n```","summary":"<p>Network informations about the system or a process like the brandwidth use.</p>","constructors":[{"html_id":"new(pid:Int64|Nil=nil)-class-method","name":"new","doc":"Creates a new `Hardware::Net` for the system, or a given PID.","summary":"<p>Creates a new <code><a href=\"../Hardware/Net.html\">Hardware::Net</a></code> for the system, or a given PID.</p>","abstract":false,"args":[{"name":"pid","default_value":"nil","external_name":"pid","restriction":"Int64 | ::Nil"}],"args_string":"(pid : Int64 | Nil = nil)","args_html":"(pid : Int64 | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/net.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"pid","default_value":"nil","external_name":"pid","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"in_bcast_octets:Int64-instance-method","name":"in_bcast_octets","doc":"Returns the \"\"InBcastOctets\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;InBcastOctets&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_bcast_octets","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InBcastOctets\"]"},"external_var":false},{"html_id":"in_bcast_pkts:Int64-instance-method","name":"in_bcast_pkts","doc":"Returns the \"\"InBcastPkts\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;InBcastPkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_bcast_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InBcastPkts\"]"},"external_var":false},{"html_id":"in_ce_pkts:Int64-instance-method","name":"in_ce_pkts","doc":"Returns the \"\"InCePkts\"\" field of the `IpExt` field in `net/netstat`.  Only in recent versions of Linux","summary":"<p>Returns the &quot;&quot;InCePkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_ce_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InCePkts\"]"},"external_var":false},{"html_id":"in_csum_errors:Int64-instance-method","name":"in_csum_errors","doc":"Returns the \"\"InCsumErrors\"\" field of the `IpExt` field in `net/netstat`.  Only in recent versions of Linux","summary":"<p>Returns the &quot;&quot;InCsumErrors&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_csum_errors","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InCsumErrors\"]"},"external_var":false},{"html_id":"in_ect0_pkts:Int64-instance-method","name":"in_ect0_pkts","doc":"Returns the \"\"InEct0Pkts\"\" field of the `IpExt` field in `net/netstat`.  Only in recent versions of Linux","summary":"<p>Returns the &quot;&quot;InEct0Pkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_ect0_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InEct0Pkts\"]"},"external_var":false},{"html_id":"in_ect1_pkts:Int64-instance-method","name":"in_ect1_pkts","doc":"Returns the \"\"InEct1Pkts\"\" field of the `IpExt` field in `net/netstat`.  Only in recent versions of Linux","summary":"<p>Returns the &quot;&quot;InEct1Pkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_ect1_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InEct1Pkts\"]"},"external_var":false},{"html_id":"in_mcast_octets:Int64-instance-method","name":"in_mcast_octets","doc":"Returns the \"\"InMcastOctets\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;InMcastOctets&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_mcast_octets","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InMcastOctets\"]"},"external_var":false},{"html_id":"in_mcast_pkts:Int64-instance-method","name":"in_mcast_pkts","doc":"Returns the \"\"InMcastPkts\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;InMcastPkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_mcast_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InMcastPkts\"]"},"external_var":false},{"html_id":"in_no_ect_pkts:Int64-instance-method","name":"in_no_ect_pkts","doc":"Returns the \"\"InNoEctPkts\"\" field of the `IpExt` field in `net/netstat`.  Only in recent versions of Linux","summary":"<p>Returns the &quot;&quot;InNoEctPkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_no_ect_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InNoEctPkts\"]"},"external_var":false},{"html_id":"in_no_routes:Int64-instance-method","name":"in_no_routes","doc":"Returns the \"\"InNoRoutes\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;InNoRoutes&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_no_routes","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InNoRoutes\"]"},"external_var":false},{"html_id":"in_octets:Int64-instance-method","name":"in_octets","doc":"Returns the \"\"InOctets\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;InOctets&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_octets","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InOctets\"]"},"external_var":false},{"html_id":"in_truncated_pkts:Int64-instance-method","name":"in_truncated_pkts","doc":"Returns the \"\"InTruncatedPkts\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;InTruncatedPkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"in_truncated_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"InTruncatedPkts\"]"},"external_var":false},{"html_id":"ip_ext:Hash(String,Int64)-instance-method","name":"ip_ext","abstract":false,"location":{"filename":"src/net.cr","line_number":20,"url":null},"def":{"name":"ip_ext","return_type":"Hash(String, Int64)","visibility":"Public","body":"@ip_ext"},"external_var":false},{"html_id":"out_bcast_octets:Int64-instance-method","name":"out_bcast_octets","doc":"Returns the \"\"OutBcastOctets\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;OutBcastOctets&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"out_bcast_octets","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"OutBcastOctets\"]"},"external_var":false},{"html_id":"out_bcast_pkts:Int64-instance-method","name":"out_bcast_pkts","doc":"Returns the \"\"OutBcastPkts\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;OutBcastPkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"out_bcast_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"OutBcastPkts\"]"},"external_var":false},{"html_id":"out_mcast_octets:Int64-instance-method","name":"out_mcast_octets","doc":"Returns the \"\"OutMcastOctets\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;OutMcastOctets&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"out_mcast_octets","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"OutMcastOctets\"]"},"external_var":false},{"html_id":"out_mcast_pkts:Int64-instance-method","name":"out_mcast_pkts","doc":"Returns the \"\"OutMcastPkts\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;OutMcastPkts&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"out_mcast_pkts","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"OutMcastPkts\"]"},"external_var":false},{"html_id":"out_octets:Int64-instance-method","name":"out_octets","doc":"Returns the \"\"OutOctets\"\" field of the `IpExt` field in `net/netstat`.","summary":"<p>Returns the &quot;&quot;OutOctets&quot;&quot; field of the <code>IpExt</code> field in <code>net/netstat</code>.</p>","abstract":false,"location":{"filename":"src/net.cr","line_number":67,"url":null},"def":{"name":"out_octets","return_type":"Int64","visibility":"Public","body":"@ip_ext[\"OutOctets\"]"},"external_var":false},{"html_id":"pid:Int64|Nil-instance-method","name":"pid","abstract":false,"location":{"filename":"src/net.cr","line_number":18,"url":null},"def":{"name":"pid","return_type":"Int64 | ::Nil","visibility":"Public","body":"@pid"},"external_var":false},{"html_id":"tcp_ext:Hash(String,Int64)-instance-method","name":"tcp_ext","abstract":false,"location":{"filename":"src/net.cr","line_number":19,"url":null},"def":{"name":"tcp_ext","return_type":"Hash(String, Int64)","visibility":"Public","body":"@tcp_ext"},"external_var":false}]},{"html_id":"hardware/Hardware/PID","path":"Hardware/PID.html","kind":"struct","full_name":"Hardware::PID","name":"PID","abstract":false,"superclass":{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"hardware/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"hardware/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/pid.cr","line_number":9,"url":null}],"repository_name":"hardware","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hardware/Hardware","kind":"module","full_name":"Hardware","name":"Hardware"},"doc":"All informations related to the Processes running on your sytem, defined by Process IDentifiers.\n\n```\npid = Hardware::PID.new           # Default is Process.pid\napp = Hardware::PID.new \"firefox\" # Take the first matching PID\n```","summary":"<p>All informations related to the Processes running on your sytem, defined by Process IDentifiers.</p>","class_methods":[{"html_id":"each(&:PID->):Nil-class-method","name":"each","doc":"Yields a `Hardware::PID` for each PID present on the system.","summary":"<p>Yields a <code><a href=\"../Hardware/PID.html\">Hardware::PID</a></code> for each PID present on the system.</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":38,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(PID ->)"},"return_type":"Nil","visibility":"Public","body":"Dir.each_child(\"/proc\") do |pid_dir|\n  if pid = pid_dir.to_i64?\n    yield Hardware::PID.new(pid)\n  end\nend"},"external_var":false},{"html_id":"get_pids(executable:String,&:Int64->)-class-method","name":"get_pids","doc":"Yield each pids corresponding to a given `executable` name.","summary":"<p>Yield each pids corresponding to a given <code>executable</code> name.</p>","abstract":false,"args":[{"name":"executable","external_name":"executable","restriction":"String"}],"args_string":"(executable : String, & : Int64 -> )","args_html":"(executable : String, & : Int64 -> )","location":{"filename":"src/pid.cr","line_number":47,"url":null},"def":{"name":"get_pids","args":[{"name":"executable","external_name":"executable","restriction":"String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Int64 ->)"},"visibility":"Public","body":"each do |pid|\n  if pid.name == executable\n    yield pid.number\n  end\nend"},"external_var":false}],"constructors":[{"html_id":"new(number:Int64=Process.pid)-class-method","name":"new","doc":"Creates a new `Hardware::PID`.","summary":"<p>Creates a new <code><a href=\"../Hardware/PID.html\">Hardware::PID</a></code>.</p>","abstract":false,"args":[{"name":"number","default_value":"Process.pid","external_name":"number","restriction":"Int64"}],"args_string":"(number : Int64 = Process.pid)","args_html":"(number : Int64 = <span class=\"t\">Process</span>.pid)","location":{"filename":"src/pid.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"number","default_value":"Process.pid","external_name":"number","restriction":"Int64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(number)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false},{"html_id":"new(executable:String)-class-method","name":"new","doc":"Creates a new `Hardware::PID` by finding the `executable`'s pid.","summary":"<p>Creates a new <code><a href=\"../Hardware/PID.html\">Hardware::PID</a></code> by finding the <code>executable</code>'s pid.</p>","abstract":false,"args":[{"name":"executable","external_name":"executable","restriction":"String"}],"args_string":"(executable : String)","args_html":"(executable : String)","location":{"filename":"src/pid.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"executable","external_name":"executable","restriction":"String"}],"visibility":"Public","body":"match_pid = nil\nget_pids(executable) do |pid|\n  match_pid = pid\n  break\nend\nif !match_pid\n  raise(Error.new(\"No pid for '#{executable}' exists\"))\nend\nnew(match_pid)\n"},"external_var":false}],"instance_methods":[{"html_id":"cmdline:String-instance-method","name":"cmdline","doc":"Returns `/proc/``#pid``/cmdline`.","summary":"<p>Returns <code>/proc/``#pid``/cmdline</code>.</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":59,"url":null},"def":{"name":"cmdline","return_type":"String","visibility":"Public","body":"read_proc(\"cmdline\", &.gets_to_end)"},"external_var":false},{"html_id":"command:String-instance-method","name":"command","doc":"Returns a `String` representation of `/proc/``#pid``/cmdline`.","summary":"<p>Returns a <code>String</code> representation of <code>/proc/``#pid``/cmdline</code>.</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":54,"url":null},"def":{"name":"command","return_type":"String","visibility":"Public","body":"cmdline.gsub('\\0', ' ')"},"external_var":false},{"html_id":"exe:String-instance-method","name":"exe","doc":"Returns `/proc/``#pid``/exe` if readable.","summary":"<p>Returns <code>/proc/``#pid``/exe</code> if readable.</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":64,"url":null},"def":{"name":"exe","return_type":"String","visibility":"Public","body":"File.realpath(\"/proc/#{@number}/exe\")"},"external_var":false},{"html_id":"exists?:Bool-instance-method","name":"exists?","abstract":false,"location":{"filename":"src/pid.cr","line_number":68,"url":null},"def":{"name":"exists?","return_type":"Bool","visibility":"Public","body":"Dir.exists?(\"/proc/#{@number}\")"},"external_var":false},{"html_id":"memory:Int32-instance-method","name":"memory","doc":"Returns the actual memory used by the process.","summary":"<p>Returns the actual memory used by the process.</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":73,"url":null},"def":{"name":"memory","return_type":"Int32","visibility":"Public","body":"statm.first * 4"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"Returns the PID name based on `#exe` or `#cmdline`.","summary":"<p>Returns the PID name based on <code><a href=\"../Hardware/PID.html#exe%3AString-instance-method\">#exe</a></code> or <code><a href=\"../Hardware/PID.html#cmdline%3AString-instance-method\">#cmdline</a></code>.</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":79,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"begin\n  File.basename(exe)\nrescue\n  File.basename(command)\nend"},"external_var":false},{"html_id":"net:Net-instance-method","name":"net","doc":"Returns `Hardware::Net` for `#pid`","summary":"<p>Returns <code><a href=\"../Hardware/Net.html\">Hardware::Net</a></code> for <code>#pid</code></p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":86,"url":null},"def":{"name":"net","return_type":"Net","visibility":"Public","body":"Net.new(@number)"},"external_var":false},{"html_id":"number:Int64-instance-method","name":"number","doc":"Pid number","summary":"<p>Pid number</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":11,"url":null},"def":{"name":"number","return_type":"Int64","visibility":"Public","body":"@number"},"external_var":false},{"html_id":"stat(cpu:CPU|Nil=CPU.new):Stat-instance-method","name":"stat","doc":"Returns a parsed `/proc/``#pid``/stat`.\n\nHave CPU information of the process.\n```\npid_stat = Hardware::PID.new.stat\nloop do\n  sleep 1\n  p pid_stat.cpu_usage! # => 1.5\nend\n```","summary":"<p>Returns a parsed <code>/proc/``#pid``/stat</code>.</p>","abstract":false,"args":[{"name":"cpu","default_value":"CPU.new","external_name":"cpu","restriction":"CPU | ::Nil"}],"args_string":"(cpu : CPU | Nil = CPU.new) : Stat","args_html":"(cpu : <a href=\"../Hardware/CPU.html\">CPU</a> | Nil = <span class=\"t\">CPU</span>.new) : <a href=\"../Hardware/PID/Stat.html\">Stat</a>","location":{"filename":"src/pid.cr","line_number":100,"url":null},"def":{"name":"stat","args":[{"name":"cpu","default_value":"CPU.new","external_name":"cpu","restriction":"CPU | ::Nil"}],"return_type":"Stat","visibility":"Public","body":"Stat.new(@number, cpu)"},"external_var":false},{"html_id":"statm:Array(Int32)-instance-method","name":"statm","doc":"Returns a parsed `/proc/``#pid``/statm`.","summary":"<p>Returns a parsed <code>/proc/``#pid``/statm</code>.</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":105,"url":null},"def":{"name":"statm","return_type":"Array(Int32)","visibility":"Public","body":"values = Array(Int32).new\nread_proc(\"statm\") do |__arg1|\n  __arg1.gets_to_end.split(' ') do |int|\n    values << int.to_i\n  end\nend\nvalues\n"},"external_var":false},{"html_id":"status:Status-instance-method","name":"status","doc":"Returns a parsed `/proc/``#pid``/status`.","summary":"<p>Returns a parsed <code>/proc/``#pid``/status</code>.</p>","abstract":false,"location":{"filename":"src/pid.cr","line_number":114,"url":null},"def":{"name":"status","return_type":"Status","visibility":"Public","body":"read_proc(\"status\") do |io|\n  Status.new(io)\nend"},"external_var":false}],"types":[{"html_id":"hardware/Hardware/PID/Stat","path":"Hardware/PID/Stat.html","kind":"struct","full_name":"Hardware::PID::Stat","name":"Stat","abstract":false,"superclass":{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"hardware/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"hardware/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/pid/stat.cr","line_number":10,"url":null}],"repository_name":"hardware","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hardware/Hardware/PID","kind":"struct","full_name":"Hardware::PID","name":"PID"},"doc":"Parse stat initialized at `Hadware::PID#stat`\n\n```\npid_stat = Hardware::PID::Stat.new\nloop do\n  sleep 1\n  p pid_stat.cpu_usage! # => 1.5\nend\n```","summary":"<p>Parse stat initialized at <code>Hadware::PID#stat</code></p>","constructors":[{"html_id":"new(pid:Int64=Process.pid,cpu:CPU|Nil=CPU.new)-class-method","name":"new","abstract":false,"args":[{"name":"pid","default_value":"Process.pid","external_name":"pid","restriction":"Int64"},{"name":"cpu","default_value":"CPU.new","external_name":"cpu","restriction":"CPU | ::Nil"}],"args_string":"(pid : Int64 = Process.pid, cpu : CPU | Nil = CPU.new)","args_html":"(pid : Int64 = <span class=\"t\">Process</span>.pid, cpu : <a href=\"../../Hardware/CPU.html\">CPU</a> | Nil = <span class=\"t\">CPU</span>.new)","location":{"filename":"src/pid/stat.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"pid","default_value":"Process.pid","external_name":"pid","restriction":"Int64"},{"name":"cpu","default_value":"CPU.new","external_name":"cpu","restriction":"CPU | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pid, cpu)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"cmajflt:Int64-instance-method","name":"cmajflt","doc":"Returns the \"cmajflt\" stat field.","summary":"<p>Returns the &quot;cmajflt&quot; stat field.</p>","abstract":false,"def":{"name":"cmajflt","return_type":"Int64","visibility":"Public","body":"if (__temp_161 = @cmajflt).nil?\n  @cmajflt = (begin\n    parse_stat_file\n    @cmajflt || (raise(Error.new(\"Field not parsed: 'cmajflt'\")))\n  end)\nelse\n  __temp_161\nend"},"external_var":false},{"html_id":"cminflt:Int64-instance-method","name":"cminflt","doc":"Returns the \"cminflt\" stat field.","summary":"<p>Returns the &quot;cminflt&quot; stat field.</p>","abstract":false,"def":{"name":"cminflt","return_type":"Int64","visibility":"Public","body":"if (__temp_159 = @cminflt).nil?\n  @cminflt = (begin\n    parse_stat_file\n    @cminflt || (raise(Error.new(\"Field not parsed: 'cminflt'\")))\n  end)\nelse\n  __temp_159\nend"},"external_var":false},{"html_id":"comm:String-instance-method","name":"comm","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":118,"url":null},"def":{"name":"comm","return_type":"String","visibility":"Public","body":"if (__temp_173 = @comm).nil?\n  @comm = (begin\n    parse_stat_file\n    @comm || (raise(Error.new(\"Field not parsed: 'comm'\")))\n  end)\nelse\n  __temp_173\nend"},"external_var":false},{"html_id":"cpu_time(children:Bool=false):Int32-instance-method","name":"cpu_time","doc":"Returns the CPU time with or without including ones from `children` processes.","summary":"<p>Returns the CPU time with or without including ones from <code>children</code> processes.</p>","abstract":false,"args":[{"name":"children","default_value":"false","external_name":"children","restriction":"Bool"}],"args_string":"(children : Bool = false) : Int32","args_html":"(children : Bool = <span class=\"n\">false</span>) : Int32","location":{"filename":"src/pid/stat.cr","line_number":122,"url":null},"def":{"name":"cpu_time","args":[{"name":"children","default_value":"false","external_name":"children","restriction":"Bool"}],"return_type":"Int32","visibility":"Public","body":"@cpu_time = (utime + stime).to_i\n\n@cpu_time_children = @cpu_time + (cutime + cstime).to_i\nchildren ? @cpu_time_children : @cpu_time\n"},"external_var":false},{"html_id":"cpu_usage!(children:Bool=false,current_cpu:CPU=CPU.new):Float64-instance-method","name":"cpu_usage!","doc":"Returns the CPU used in percentage.\n```\npid_stat = Hardware::PID::Stat.new\nloop do\n  sleep 1\n  p pid_stat.cpu_usage! # => 1.5\nend\n```","summary":"<p>Returns the CPU used in percentage.</p>","abstract":false,"args":[{"name":"children","default_value":"false","external_name":"children","restriction":"Bool"},{"name":"current_cpu","default_value":"CPU.new","external_name":"current_cpu","restriction":"CPU"}],"args_string":"(children : Bool = false, current_cpu : CPU = CPU.new) : Float64","args_html":"(children : Bool = <span class=\"n\">false</span>, current_cpu : <a href=\"../../Hardware/CPU.html\">CPU</a> = <span class=\"t\">CPU</span>.new) : Float64","location":{"filename":"src/pid/stat.cr","line_number":141,"url":null},"def":{"name":"cpu_usage!","args":[{"name":"children","default_value":"false","external_name":"children","restriction":"Bool"},{"name":"current_cpu","default_value":"CPU.new","external_name":"current_cpu","restriction":"CPU"}],"return_type":"Float64","visibility":"Public","body":"cpu = @cpu || CPU.new\nprevious_cpu_time = children ? @cpu_time_children : @cpu_time\n\n\nparse_stat_file\nresult = (((cpu_time(children)) - previous_cpu_time) / (current_cpu.total - cpu.total)) * 100\n@cpu = current_cpu\n\nresult.nan? ? 0_f64 : result\n"},"external_var":false},{"html_id":"cstime:Int64-instance-method","name":"cstime","doc":"Returns the \"cstime\" stat field.","summary":"<p>Returns the &quot;cstime&quot; stat field.</p>","abstract":false,"def":{"name":"cstime","return_type":"Int64","visibility":"Public","body":"if (__temp_165 = @cstime).nil?\n  @cstime = (begin\n    parse_stat_file\n    @cstime || (raise(Error.new(\"Field not parsed: 'cstime'\")))\n  end)\nelse\n  __temp_165\nend"},"external_var":false},{"html_id":"cutime:Int64-instance-method","name":"cutime","doc":"Returns the \"cutime\" stat field.","summary":"<p>Returns the &quot;cutime&quot; stat field.</p>","abstract":false,"def":{"name":"cutime","return_type":"Int64","visibility":"Public","body":"if (__temp_164 = @cutime).nil?\n  @cutime = (begin\n    parse_stat_file\n    @cutime || (raise(Error.new(\"Field not parsed: 'cutime'\")))\n  end)\nelse\n  __temp_164\nend"},"external_var":false},{"html_id":"data:Array(String)-instance-method","name":"data","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":11,"url":null},"def":{"name":"data","return_type":"Array(String)","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"flags:Int64-instance-method","name":"flags","doc":"Returns the \"flags\" stat field.","summary":"<p>Returns the &quot;flags&quot; stat field.</p>","abstract":false,"def":{"name":"flags","return_type":"Int64","visibility":"Public","body":"if (__temp_157 = @flags).nil?\n  @flags = (begin\n    parse_stat_file\n    @flags || (raise(Error.new(\"Field not parsed: 'flags'\")))\n  end)\nelse\n  __temp_157\nend"},"external_var":false},{"html_id":"itrealvalue:Int64-instance-method","name":"itrealvalue","doc":"Returns the \"itrealvalue\" stat field.","summary":"<p>Returns the &quot;itrealvalue&quot; stat field.</p>","abstract":false,"def":{"name":"itrealvalue","return_type":"Int64","visibility":"Public","body":"if (__temp_169 = @itrealvalue).nil?\n  @itrealvalue = (begin\n    parse_stat_file\n    @itrealvalue || (raise(Error.new(\"Field not parsed: 'itrealvalue'\")))\n  end)\nelse\n  __temp_169\nend"},"external_var":false},{"html_id":"majflt:Int64-instance-method","name":"majflt","doc":"Returns the \"majflt\" stat field.","summary":"<p>Returns the &quot;majflt&quot; stat field.</p>","abstract":false,"def":{"name":"majflt","return_type":"Int64","visibility":"Public","body":"if (__temp_160 = @majflt).nil?\n  @majflt = (begin\n    parse_stat_file\n    @majflt || (raise(Error.new(\"Field not parsed: 'majflt'\")))\n  end)\nelse\n  __temp_160\nend"},"external_var":false},{"html_id":"minflt:Int64-instance-method","name":"minflt","doc":"Returns the \"minflt\" stat field.","summary":"<p>Returns the &quot;minflt&quot; stat field.</p>","abstract":false,"def":{"name":"minflt","return_type":"Int64","visibility":"Public","body":"if (__temp_158 = @minflt).nil?\n  @minflt = (begin\n    parse_stat_file\n    @minflt || (raise(Error.new(\"Field not parsed: 'minflt'\")))\n  end)\nelse\n  __temp_158\nend"},"external_var":false},{"html_id":"nice:Int64-instance-method","name":"nice","doc":"Returns the \"nice\" stat field.","summary":"<p>Returns the &quot;nice&quot; stat field.</p>","abstract":false,"def":{"name":"nice","return_type":"Int64","visibility":"Public","body":"if (__temp_167 = @nice).nil?\n  @nice = (begin\n    parse_stat_file\n    @nice || (raise(Error.new(\"Field not parsed: 'nice'\")))\n  end)\nelse\n  __temp_167\nend"},"external_var":false},{"html_id":"numthreads:Int64-instance-method","name":"numthreads","doc":"Returns the \"numthreads\" stat field.","summary":"<p>Returns the &quot;numthreads&quot; stat field.</p>","abstract":false,"def":{"name":"numthreads","return_type":"Int64","visibility":"Public","body":"if (__temp_168 = @numthreads).nil?\n  @numthreads = (begin\n    parse_stat_file\n    @numthreads || (raise(Error.new(\"Field not parsed: 'numthreads'\")))\n  end)\nelse\n  __temp_168\nend"},"external_var":false},{"html_id":"parse_stat_file-instance-method","name":"parse_stat_file","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":50,"url":null},"def":{"name":"parse_stat_file","visibility":"Public","body":"begin\n  buffer = IO::Memory.new\n  column_num = 0\n  File.open(\"/proc/#{@pid}/stat\", &.each_char do |char|\n    case char\n    when '('\n      if column_num != 1\n        buffer << char\n      end\n    when ')'\n      case column_num\n      when 1\n        @comm = buffer.to_s\n        buffer.clear\n        column_num = column_num + 1\n      when 2\n      else\n        buffer << char\n      end\n    when ' ', '\\n'\n      if buffer.empty?\n        next\n      end\n      case column_num\n      when 0\n      when 1\n        next\n      when 2\n        @state = State.new(buffer.to_s)\n      when 3\n        @ppid = buffer.to_s.to_i64\n      when 4\n        @pgrp = buffer.to_s.to_i64\n      when 5\n        @session = buffer.to_s.to_i64\n      when 6\n        @tty_nr = buffer.to_s.to_i64\n      when 7\n        @tpgid = buffer.to_s.to_i64\n      when 8\n        @flags = buffer.to_s.to_i64\n      when 9\n        @minflt = buffer.to_s.to_i64\n      when 10\n        @cminflt = buffer.to_s.to_i64\n      when 11\n        @majflt = buffer.to_s.to_i64\n      when 12\n        @cmajflt = buffer.to_s.to_i64\n      when 13\n        @utime = buffer.to_s.to_i64\n      when 14\n        @stime = buffer.to_s.to_i64\n      when 15\n        @cutime = buffer.to_s.to_i64\n      when 16\n        @cstime = buffer.to_s.to_i64\n      when 17\n        @priority = buffer.to_s.to_i64\n      when 18\n        @nice = buffer.to_s.to_i64\n      when 19\n        @numthreads = buffer.to_s.to_i64\n      when 20\n        @itrealvalue = buffer.to_s.to_i64\n      when 21\n        @starttime = buffer.to_s.to_i64\n      when 22\n        @vsize = buffer.to_s.to_i64\n      when 23\n        @rss = buffer.to_s.to_i64\n      end\n      column_num = column_num + 1\n      buffer.clear\n    else\n      buffer << char\n    end\n  end)\nrescue ex\n  raise(Error.new(\"Failed to parse #{@pid}\", ex))\nend"},"external_var":false},{"html_id":"pgrp:Int64-instance-method","name":"pgrp","doc":"Returns the \"pgrp\" stat field.","summary":"<p>Returns the &quot;pgrp&quot; stat field.</p>","abstract":false,"def":{"name":"pgrp","return_type":"Int64","visibility":"Public","body":"if (__temp_153 = @pgrp).nil?\n  @pgrp = (begin\n    parse_stat_file\n    @pgrp || (raise(Error.new(\"Field not parsed: 'pgrp'\")))\n  end)\nelse\n  __temp_153\nend"},"external_var":false},{"html_id":"pid:Int64-instance-method","name":"pid","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":12,"url":null},"def":{"name":"pid","return_type":"Int64","visibility":"Public","body":"@pid"},"external_var":false},{"html_id":"ppid:Int64-instance-method","name":"ppid","doc":"Generate methods based on stat\nReturns the \"ppid\" stat field.","summary":"<p>Generate methods based on stat Returns the &quot;ppid&quot; stat field.</p>","abstract":false,"def":{"name":"ppid","return_type":"Int64","visibility":"Public","body":"if (__temp_152 = @ppid).nil?\n  @ppid = (begin\n    parse_stat_file\n    @ppid || (raise(Error.new(\"Field not parsed: 'ppid'\")))\n  end)\nelse\n  __temp_152\nend"},"external_var":false},{"html_id":"priority:Int64-instance-method","name":"priority","doc":"Returns the \"priority\" stat field.","summary":"<p>Returns the &quot;priority&quot; stat field.</p>","abstract":false,"def":{"name":"priority","return_type":"Int64","visibility":"Public","body":"if (__temp_166 = @priority).nil?\n  @priority = (begin\n    parse_stat_file\n    @priority || (raise(Error.new(\"Field not parsed: 'priority'\")))\n  end)\nelse\n  __temp_166\nend"},"external_var":false},{"html_id":"rss:Int64-instance-method","name":"rss","doc":"Returns the \"rss\" stat field.","summary":"<p>Returns the &quot;rss&quot; stat field.</p>","abstract":false,"def":{"name":"rss","return_type":"Int64","visibility":"Public","body":"if (__temp_172 = @rss).nil?\n  @rss = (begin\n    parse_stat_file\n    @rss || (raise(Error.new(\"Field not parsed: 'rss'\")))\n  end)\nelse\n  __temp_172\nend"},"external_var":false},{"html_id":"session:Int64-instance-method","name":"session","doc":"Returns the \"session\" stat field.","summary":"<p>Returns the &quot;session&quot; stat field.</p>","abstract":false,"def":{"name":"session","return_type":"Int64","visibility":"Public","body":"if (__temp_154 = @session).nil?\n  @session = (begin\n    parse_stat_file\n    @session || (raise(Error.new(\"Field not parsed: 'session'\")))\n  end)\nelse\n  __temp_154\nend"},"external_var":false},{"html_id":"starttime:Int64-instance-method","name":"starttime","doc":"Returns the \"starttime\" stat field.","summary":"<p>Returns the &quot;starttime&quot; stat field.</p>","abstract":false,"def":{"name":"starttime","return_type":"Int64","visibility":"Public","body":"if (__temp_170 = @starttime).nil?\n  @starttime = (begin\n    parse_stat_file\n    @starttime || (raise(Error.new(\"Field not parsed: 'starttime'\")))\n  end)\nelse\n  __temp_170\nend"},"external_var":false},{"html_id":"state:State-instance-method","name":"state","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":119,"url":null},"def":{"name":"state","return_type":"State","visibility":"Public","body":"if (__temp_174 = @state).nil?\n  @state = (begin\n    parse_stat_file\n    @state || (raise(Error.new(\"Field not parsed: 'state'\")))\n  end)\nelse\n  __temp_174\nend"},"external_var":false},{"html_id":"stime:Int64-instance-method","name":"stime","doc":"Returns the \"stime\" stat field.","summary":"<p>Returns the &quot;stime&quot; stat field.</p>","abstract":false,"def":{"name":"stime","return_type":"Int64","visibility":"Public","body":"if (__temp_163 = @stime).nil?\n  @stime = (begin\n    parse_stat_file\n    @stime || (raise(Error.new(\"Field not parsed: 'stime'\")))\n  end)\nelse\n  __temp_163\nend"},"external_var":false},{"html_id":"tpgid:Int64-instance-method","name":"tpgid","doc":"Returns the \"tpgid\" stat field.","summary":"<p>Returns the &quot;tpgid&quot; stat field.</p>","abstract":false,"def":{"name":"tpgid","return_type":"Int64","visibility":"Public","body":"if (__temp_156 = @tpgid).nil?\n  @tpgid = (begin\n    parse_stat_file\n    @tpgid || (raise(Error.new(\"Field not parsed: 'tpgid'\")))\n  end)\nelse\n  __temp_156\nend"},"external_var":false},{"html_id":"tty_nr:Int64-instance-method","name":"tty_nr","doc":"Returns the \"tty_nr\" stat field.","summary":"<p>Returns the &quot;tty_nr&quot; stat field.</p>","abstract":false,"def":{"name":"tty_nr","return_type":"Int64","visibility":"Public","body":"if (__temp_155 = @tty_nr).nil?\n  @tty_nr = (begin\n    parse_stat_file\n    @tty_nr || (raise(Error.new(\"Field not parsed: 'tty_nr'\")))\n  end)\nelse\n  __temp_155\nend"},"external_var":false},{"html_id":"utime:Int64-instance-method","name":"utime","doc":"Returns the \"utime\" stat field.","summary":"<p>Returns the &quot;utime&quot; stat field.</p>","abstract":false,"def":{"name":"utime","return_type":"Int64","visibility":"Public","body":"if (__temp_162 = @utime).nil?\n  @utime = (begin\n    parse_stat_file\n    @utime || (raise(Error.new(\"Field not parsed: 'utime'\")))\n  end)\nelse\n  __temp_162\nend"},"external_var":false},{"html_id":"vsize:Int64-instance-method","name":"vsize","doc":"Returns the \"vsize\" stat field.","summary":"<p>Returns the &quot;vsize&quot; stat field.</p>","abstract":false,"def":{"name":"vsize","return_type":"Int64","visibility":"Public","body":"if (__temp_171 = @vsize).nil?\n  @vsize = (begin\n    parse_stat_file\n    @vsize || (raise(Error.new(\"Field not parsed: 'vsize'\")))\n  end)\nelse\n  __temp_171\nend"},"external_var":false}],"types":[{"html_id":"hardware/Hardware/PID/Stat/State","path":"Hardware/PID/Stat/State.html","kind":"enum","full_name":"Hardware::PID::Stat::State","name":"State","abstract":false,"ancestors":[{"html_id":"hardware/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"hardware/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"hardware/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"hardware/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/pid/stat.cr","line_number":17,"url":null}],"repository_name":"hardware","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Running","name":"Running","value":"0"},{"id":"Sleeping","name":"Sleeping","value":"1"},{"id":"Wait","name":"Wait","value":"2"},{"id":"Zombie","name":"Zombie","value":"3"},{"id":"Stopped","name":"Stopped","value":"4"},{"id":"TracingStop","name":"TracingStop","value":"5"},{"id":"Paging","name":"Paging","value":"6"},{"id":"Dead","name":"Dead","value":"7"},{"id":"Interruptible","name":"Interruptible","value":"8"}],"namespace":{"html_id":"hardware/Hardware/PID/Stat","kind":"struct","full_name":"Hardware::PID::Stat","name":"Stat"},"constructors":[{"html_id":"new(stat:String)-class-method","name":"new","abstract":false,"args":[{"name":"stat","external_name":"stat","restriction":"String"}],"args_string":"(stat : String)","args_html":"(stat : String)","location":{"filename":"src/pid/stat.cr","line_number":28,"url":null},"def":{"name":"new","args":[{"name":"stat","external_name":"stat","restriction":"String"}],"visibility":"Public","body":"case stat\nwhen \"R\"\n  Running\nwhen \"S\"\n  Sleeping\nwhen \"D\"\n  Wait\nwhen \"Z\"\n  Zombie\nwhen \"T\"\n  Stopped\nwhen \"t\"\n  TracingStop\nwhen \"W\"\n  Paging\nwhen \"x\", \"X\"\n  Dead\nwhen \"I\"\n  Interruptible\nelse\n  raise(Error.new(\"Invalid stat: #{stat}\"))\nend"},"external_var":false}],"instance_methods":[{"html_id":"dead?-instance-method","name":"dead?","doc":"Returns `true` if this enum value equals `Dead`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#Dead\">Dead</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":25,"url":null},"def":{"name":"dead?","visibility":"Public","body":"self == Dead"},"external_var":false},{"html_id":"interruptible?-instance-method","name":"interruptible?","doc":"Returns `true` if this enum value equals `Interruptible`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#Interruptible\">Interruptible</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":26,"url":null},"def":{"name":"interruptible?","visibility":"Public","body":"self == Interruptible"},"external_var":false},{"html_id":"paging?-instance-method","name":"paging?","doc":"Returns `true` if this enum value equals `Paging`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#Paging\">Paging</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":24,"url":null},"def":{"name":"paging?","visibility":"Public","body":"self == Paging"},"external_var":false},{"html_id":"running?-instance-method","name":"running?","doc":"Returns `true` if this enum value equals `Running`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#Running\">Running</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":18,"url":null},"def":{"name":"running?","visibility":"Public","body":"self == Running"},"external_var":false},{"html_id":"sleeping?-instance-method","name":"sleeping?","doc":"Returns `true` if this enum value equals `Sleeping`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#Sleeping\">Sleeping</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":19,"url":null},"def":{"name":"sleeping?","visibility":"Public","body":"self == Sleeping"},"external_var":false},{"html_id":"stopped?-instance-method","name":"stopped?","doc":"Returns `true` if this enum value equals `Stopped`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#Stopped\">Stopped</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":22,"url":null},"def":{"name":"stopped?","visibility":"Public","body":"self == Stopped"},"external_var":false},{"html_id":"tracing_stop?-instance-method","name":"tracing_stop?","doc":"Returns `true` if this enum value equals `TracingStop`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#TracingStop\">TracingStop</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":23,"url":null},"def":{"name":"tracing_stop?","visibility":"Public","body":"self == TracingStop"},"external_var":false},{"html_id":"wait?-instance-method","name":"wait?","doc":"Returns `true` if this enum value equals `Wait`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#Wait\">Wait</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":20,"url":null},"def":{"name":"wait?","visibility":"Public","body":"self == Wait"},"external_var":false},{"html_id":"zombie?-instance-method","name":"zombie?","doc":"Returns `true` if this enum value equals `Zombie`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../../Hardware/PID/Stat/State.html#Zombie\">Zombie</a></code></p>","abstract":false,"location":{"filename":"src/pid/stat.cr","line_number":21,"url":null},"def":{"name":"zombie?","visibility":"Public","body":"self == Zombie"},"external_var":false}]}]},{"html_id":"hardware/Hardware/PID/Status","path":"Hardware/PID/Status.html","kind":"struct","full_name":"Hardware::PID::Status","name":"Status","abstract":false,"superclass":{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"hardware/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"hardware/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"hardware/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/pid/status.cr","line_number":1,"url":null}],"repository_name":"hardware","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hardware/Hardware/PID","kind":"struct","full_name":"Hardware::PID","name":"PID"},"instance_methods":[{"html_id":"data:Hash(String,String)-instance-method","name":"data","abstract":false,"location":{"filename":"src/pid/status.cr","line_number":2,"url":null},"def":{"name":"data","return_type":"Hash(String, String)","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"PID's status name.","summary":"<p>PID's status name.</p>","abstract":false,"location":{"filename":"src/pid/status.cr","line_number":24,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"if (__temp_175 = @name).nil?\n  @name = (@data[\"Name\"])\nelse\n  __temp_175\nend"},"external_var":false},{"html_id":"state:String-instance-method","name":"state","doc":"PID's status state.","summary":"<p>PID's status state.</p>","abstract":false,"location":{"filename":"src/pid/status.cr","line_number":30,"url":null},"def":{"name":"state","return_type":"String","visibility":"Public","body":"if (__temp_177 = @state).nil?\n  @state = (@data[\"State\"])\nelse\n  __temp_177\nend"},"external_var":false},{"html_id":"umask:String-instance-method","name":"umask","doc":"PID's status state.","summary":"<p>PID's status state.</p>","abstract":false,"location":{"filename":"src/pid/status.cr","line_number":27,"url":null},"def":{"name":"umask","return_type":"String","visibility":"Public","body":"if (__temp_176 = @umask).nil?\n  @umask = (@data[\"Umask\"])\nelse\n  __temp_176\nend"},"external_var":false}]}]}]}]}}